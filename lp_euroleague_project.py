# -*- coding: utf-8 -*-
"""LP_Project_Final.ipynb

Automatically generated by Colab.

# Euroleague team optimizer using linear programming
**Authors**:
*   **Antonios Didonakis**
*   **Stathis Pantos**

**Institution**: **University of Thessaly**

This project aims to demonstrate how to create an interactive application for optimizing basketball team selection.
Users can choose their preferred playstyle (Aggressive, Defensive, or Balanced) and set a salary cap.
The program  uses linear programming to select 14 players that best fit the chosen playstyle while adhering to the constraints.
"""

import streamlit as st
import pandas as pd
from ortools.linear_solver import pywraplp

# Load datasets
@st.cache_data
def load_stats():
    return pd.read_csv('euroleague23_24_stats.csv')

@st.cache_data
def load_salaries():
    return pd.read_csv('euroleague_2024_salaries.csv').rename(columns={"2023-24": "Salary"})

@st.cache_data
def merge_datasets(stats_df, salaries_df):
    merged_df = pd.merge(stats_df, salaries_df, how="inner", on="Player")
    return merged_df

# Load data
df_stats = load_stats()
df_salaries = load_salaries()
df = merge_datasets(df_stats, df_salaries)

# Calculate efficiency (EFF)
df['EFF'] = (
    df['PTS'] + df['TRB'] + df['AST'] + df['STL'] + df['BLK'] +
    (df['3P'] * 1.5) - (df['FGA'] - df['FG']) - (df['FTA'] - df['FT']) -
    df['TOV'] - df['PF']
)

#Calculate Aggressive score
df["Agg_Score"] = (
    (0.5 * df["PTS"]) + (0.3 * df["3P"]) +
    (0.1 * df["AST"]) + (0.05 * df["STL"]) + (0.05 * df["BLK"])
)

#Calculate defensive score
df["Def_Score"] = (
    (0.4 * df["TRB"]) + (0.35 * df["STL"]) +
    (0.2 * df["BLK"]) + (0.1 * df["PTS"]) + (0.025 * df["AST"])
)

#Calculate balanced score
df["Bal_Score"] = (
    (0.25 * df["PTS"]) + (0.2 * df["TRB"]) +
    (0.2 * df["AST"]) + (0.2 * df["3P"]) +
    (0.075 * df["STL"]) + (0.075 * df["BLK"])
)

# User input
st.title("Euroleague Team Optimizer")
st.sidebar.header("User Inputs")
st.markdown("""
Welcome to the **Euroleague Team Optimizer** üéÆüèÄ

This application uses **linear programming** to help you build an optimized basketball Euroleague team based on:
- **Playstyle** preferences (Aggressive, Defensive, or Balanced)
- A **Salary Cap** to manage costs effectively

### How it works:
1. **Select a playstyle** from the dropdown menu on the left.
2. **Set your salary cap** using the slider.
3. **Choose a nationality** to include at least 4 players from that country.
4. Click **Run Optimization** to generate the best possible team of 14 players while adhering to the constraints.

Build your dream Euroleague team today and see how strategic constraints shape your roster! üèÜ
""")

# Select your preferred playstyle
playstyle = st.sidebar.selectbox(
    "Select Playstyle:",
    options=["Aggressive", "Defensive", "Balanced"]
)

# Select the salary limit
salary_cap = st.sidebar.slider(
    "Set Salary Cap (‚Ç¨):",
    min_value=5_000_000,
    max_value=30_000_000,
    step=1_000_000,
    value=20_000_000
)

# Select the nationality from which you want there to be at least 4 players
selected_nationality = st.sidebar.selectbox(
    "Select Nationality:",
    ['ANY', 'GREECE', 'SPAIN', 'SERBIA', 'TURKEY', 'ISRAEL', 'LITHUANIA', 'ITALY', 'FRANCE', 'GERMANY']
)

run_optimization = st.sidebar.button("Run Optimization")

# Map playstyle to score column
playstyle_map = {
    "Aggressive": "Agg_Score",
    "Defensive": "Def_Score",
    "Balanced": "Bal_Score"
}
score_column = playstyle_map[playstyle]
df["Score"] = df[score_column]

# Add constraints
def add_constraints(solver, x_var_dict, df, salary_cap, selected_nationality):
    # Team size constraint
    solver.Add(solver.Sum(x_var_dict.values()) == 14)  
    # Salary cap
    solver.Add(solver.Sum(x_var_dict[i] * df.loc[i, "Salary"] for i in df.index) <= salary_cap) 
    # Minimum players per position
    for pos in df["Pos"].unique():
        indices = df[df["Pos"] == pos].index
        solver.Add(solver.Sum(x_var_dict[i] for i in indices) >= 3)
    # Guards constraint
    guard_indices = df[df["Pos"] == "G"].index
    solver.Add(solver.Sum(x_var_dict[i] for i in guard_indices) >= 5)
    solver.Add(solver.Sum(x_var_dict[i] for i in guard_indices) <= 7)  
    # Nationality constraint
    if selected_nationality != "ANY":
        country_indices = df[df["Nationality"] == selected_nationality].index
        solver.Add(solver.Sum(x_var_dict[i] for i in country_indices) >= 4)
    
    return solver

def optimize_team(df, salary_cap, selected_nationality):
    solver = pywraplp.Solver.CreateSolver('SCIP')
    if not solver:
        st.error("Solver Initialization Failed!")
        return None

    x_var_dict = {i: solver.BoolVar(name=f"x_{i}") for i in df.index}

    solver = add_constraints(solver, x_var_dict, df, salary_cap, selected_nationality)

    #Ovjective function
    objective = solver.Objective()
    for i in df.index:
        objective.SetCoefficient(x_var_dict[i], df.loc[i, "Score"])
    objective.SetMaximization()

    status = solver.Solve()
    if status == pywraplp.Solver.OPTIMAL:
        selected_indices = [i for i in df.index if x_var_dict[i].solution_value() > 0.5]
        return df.loc[selected_indices].sort_values(by="Score", ascending=False)
    else:
        st.warning("No optimal solution found!")
        return None

# Perform optimization
if run_optimization:
    optimized_team = optimize_team(df, salary_cap, selected_nationality)

    if optimized_team is not None and not optimized_team.empty:
        optimized_team.reset_index(inplace=True, drop=True)
        st.subheader(f"Optimized Team ({playstyle}, Salary Cap: ‚Ç¨{salary_cap:,})")
        st.table(optimized_team[["Player", "Pos", "Score", "Salary", "Nationality"]])

        # Convert the DF to CSV for downloading
        csv_data = optimized_team.to_csv(index=False)

        # Add a download button for the CSV file
        st.download_button(
            label="Download Team as CSV",
            data=csv_data,
            file_name=f"optimized_team_{playstyle.lower()}_{selected_nationality.lower()}.csv",
            mime="text/csv"
        )
    else:
        st.warning("No optimal team found. Please adjust your preferences or constraints and try again.")
else:
    st.info("Select your preferences and click **Run Optimization** to see the results!")
